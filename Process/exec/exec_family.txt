Exec() familu library Functions:
````````````````````````````````
. execl()
. execlp()
. execle()
. execv()
. execvp()
. execvpe()

- Refer to "man exec" for syntax on manual pages.
- None of the above returns on success;
- all returns -1 on error
Note: execve() is a system call, where as exec's shown in this section are library functions built over 'execve()'
`````
Execve() - system call loads new program into a process's memory 
Durung this operation, the old program is discarded and its virtual memory is repalced by new program's virtual memory.
The process's stack, data, 7 heap are replaced by those of the new program.
The new program starts its execution from mail() function.

execve() - system call:
```````````````````````
#include <unistd.h>
int execve(const char* pathname, char* const argv[], char* const envp[]);
never returns on success;
returns -1 on error
Refer man 2 execve for further information

FIle sharing between parent & child:
````````````````````````````````````
- When a fork() is performed, the child receives duplicates of all the parent's file descriptors.
- This means the corresponding file descriptors in parent and child refer to the same file description.
- The open file description contains the current file offset(as modified by read(), write(), lseek()).
- As a result, these attributes of an open file are shared b/w the parent & child.

process table contains process control block(Data structure block) of every process ID

PCB(process control Block):
```````````````````````````
When a process crerated, PM will create PCB for every process.
There are many data members of PCB
. PID, PPID
. Program counter
. process state
. Scheduling information
. CPU Registers
. Process priority
. Memory management information
. List of open files of process
. many more.....

*** The struct 'task_struct' represents process control block in Linux.