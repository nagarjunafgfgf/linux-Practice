process introduction:
`````````````````````
A program which is under execution is called process.
- Process ID and Parent Process ID are allocated to process by process manager when it was running.
- When a process started execution under a terminal by default bash(shell) acts as parent.
- Shell is the interpreter b/w user & OS.
- Memory Layout of a Process.
- Examples of different memory section of Process using C Code.
* Refer program_process.png
- A process is an instance of an executing program.
- A program is a file containing a range of information that describes how to construct a process at run time.
- In Linux Processes have a Parent-child relation.
- A Process is created by its parent
- In Linux startup sequence
- Process ‘0’ is first process – called ‘scheduler’ process
- Process ‘1’ is ‘Init’ Process – Init process plays an important role. It creates and monitors set of  other process.
- vi proc/sys/kernal/pid-max -> dispalys the range of PID's can hold by this linux
- Once, it reached max, it wills tart agian from 300, first 300 PID's are reserved
- Init process becomes the parent of any ‘Orphan’ Process.
- Man 8 init – for manual page on ‘init’ process.
- #include <unistd.h>
pid_t getpid(void);
Always successfully returns process ID of caller process
The Linux kernel limits process IDs to being less than or equal to 32,767(default on 32 bit).
/proc/sys/kernel/pid_max – contains 1 greter than actual max number of process allowed in system.
‘Ps -ef’ – get running process and PID

- ./a.out & -> Makes the process should run in background (This process is called daemon process)
[1] <PID>
If you make one more process run in background
[2] <PID>

- These daemon process's are crated & handled same as remaining process's in system
- Daemon process's are start running at system time & complete when system shutdown.

Process states:
```````````````
A process is “created” state using fork() system call.
. Ready - Waiting for CPU
. Running - Process is excuting by CPU
. Wait - waiting for scanf() to read input 
. Delay - user provides sleep()
. Suspended - process receivces signal number 19, 18 for resume
* Refer process_states.png

PCB(process control Block):
```````````````````````````
When a process crerated, PM will create PCB for every process.
There are many data members of PCB
. PID, PPID
. Program counter
. process state
. Scheduling information
. CPU Registers
. Process priority
. Memory management information
. List of open files of process
. many more.....

Life of PCB is life of process

Context switch:
```````````````
- Context switch is a mechanism to store & restore the context or state of process into PCB.do that process can be resumed from same point at a later time.
- Using context switch multiple process's will share single CPU.
- Context switch is mandatory in multi processing, context switch time can't be zero & possible minimize it by using threads
- due context switch, extra burden on CPU.
- it is overhead as the system is not doing any useful work while switching

Memory Layout of process:
`````````````````````````
The different segments of  a process are..
1. Text segment – The code resides here
2. Data Segment – for data variables during compile time.
    A. Initialised data segment
    B. Un-Initialised data segment (BSS)
3. Stack segment – for local variables
4. Heap segment – for dynamic memory data’s

1)Text Segment:
The ‘text segment’ contains the code of the program that is ran.
This segment of memory cannot be written, so that the code is not altered by any pointers.
This means ‘Text segment’ is Read only.

2)Data segment:
The ‘initialized data segment’ contains global and static variables that are ‘explicitly initialized’ with value in the code.
The uninitialized data segment contains global and static variables that are not explicitly initialized in the code. The system initializes all value’s of this segment to ‘0’.

3)Stack segment:
The stack is a dynamically growing and shrinking segment containing local data’s(stack frames) of functions.
One stack frame is allocated for each function that are called. A frame stores the function’s local variables, function arguments

4)Heap segment:
The heap is an area from which memory (for variables) can be dynamically allocated at run time.

Environment of process:
```````````````````````
Each process set of  strings called the environment list, or simply the environment. Each of these strings is a definition of the form ‘name=value’.
Thus, the environment represents a set of ‘name-value’ pairs that can be used to hold arbitrary information. The names in the list are referred to as environment variables.




